// Mocks generated by Mockito 5.0.10 from annotations
// in app/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i17;
import 'dart:convert' as _i23;
import 'dart:typed_data' as _i24;

import 'package:app/core/plugins/network_utils.dart' as _i18;
import 'package:app/core/plugins/prefs.dart' as _i26;
import 'package:app/core/presentation/error_state.dart' as _i33;
import 'package:app/core/result.dart' as _i6;
import 'package:app/features/cars/data/datasources/car_api.dart' as _i30;
import 'package:app/features/cars/domain/entities/car.dart' as _i7;
import 'package:app/features/cars/domain/repositories/car_repository.dart'
    as _i5;
import 'package:app/features/cars/domain/usecases/get_cars.dart' as _i29;
import 'package:app/features/cars/presentation/viewmodel/car_viewmodel.dart'
    as _i28;
import 'package:app/features/cars/presentation/viewmodel/cars_viewmodel.dart'
    as _i27;
import 'package:app/features/login/data/datasources/login_api.dart' as _i31;
import 'package:app/features/login/domain/entities/user.dart' as _i15;
import 'package:app/features/login/domain/repositories/login_rep.dart' as _i14;
import 'package:app/features/login/domain/usecases/login_use_case.dart' as _i8;
import 'package:app/features/login/presentation/viewmodel/login_validator.dart'
    as _i12;
import 'package:app/features/login/presentation/viewmodel/login_viewmodel.dart'
    as _i9;
import 'package:app/features/logout/domain/usecases/logout_use_case.dart'
    as _i16;
import 'package:app/features/logout/presentation/viewmodel/logout_viewmodel.dart'
    as _i32;
import 'package:app/features/user/domain/repositories/user_local_repository.dart'
    as _i13;
import 'package:app/utils/generic_stream.dart' as _i11;
import 'package:app/utils/state.dart' as _i4;
import 'package:connectivity/connectivity.dart' as _i19;
import 'package:connectivity_platform_interface/src/enums.dart' as _i20;
import 'package:flutter/src/widgets/editable_text.dart' as _i10;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i21;
import 'package:http/src/base_request.dart' as _i25;
import 'package:http/src/client.dart' as _i22;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResponse extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse extends _i1.Fake implements _i3.StreamedResponse {}

class _FakeViewState<T> extends _i1.Fake implements _i4.ViewState<T> {}

class _FakeCarRepository extends _i1.Fake implements _i5.CarRepository {}

class _FakeResult<T> extends _i1.Fake implements _i6.Result<T> {}

class _FakeCar extends _i1.Fake implements _i7.Car {}

class _FakeLoginUseCase extends _i1.Fake implements _i8.LoginUseCase {}

class _FakeLoginModel extends _i1.Fake implements _i9.LoginModel {}

class _FakeLoginView extends _i1.Fake implements _i9.LoginView {}

class _FakeTextEditingController extends _i1.Fake
    implements _i10.TextEditingController {}

class _FakeBooleanStream extends _i1.Fake implements _i11.BooleanStream {}

class _FakeLoginValidator extends _i1.Fake implements _i12.LoginValidator {}

class _FakeUserLocalRepository extends _i1.Fake
    implements _i13.UserLocalRepository {}

class _FakeLoginRepository extends _i1.Fake implements _i14.LoginRepository {}

class _FakeUser extends _i1.Fake implements _i15.User {}

class _FakeLogoutUseCase extends _i1.Fake implements _i16.LogoutUseCase {}

class _FakeStreamController<T> extends _i1.Fake
    implements _i17.StreamController<T> {}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i18.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<bool> isOffline() =>
      (super.noSuchMethod(Invocation.method(#isOffline, []),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<bool> isOnline() =>
      (super.noSuchMethod(Invocation.method(#isOnline, []),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i19.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Stream<_i20.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(Invocation.getter(#onConnectivityChanged),
              returnValue: Stream<_i20.ConnectivityResult>.empty())
          as _i17.Stream<_i20.ConnectivityResult>);
  @override
  _i17.Future<_i20.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(Invocation.method(#checkConnectivity, []),
              returnValue: Future<_i20.ConnectivityResult>.value(
                  _i20.ConnectivityResult.wifi))
          as _i17.Future<_i20.ConnectivityResult>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i21.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<void> write(
          {String? key,
          String? value,
          _i21.IOSOptions? iOptions = _i21.IOSOptions.defaultOptions,
          _i21.AndroidOptions? aOptions,
          _i21.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [], {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
  @override
  _i17.Future<String?> read(
          {String? key,
          _i21.IOSOptions? iOptions = _i21.IOSOptions.defaultOptions,
          _i21.AndroidOptions? aOptions,
          _i21.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#read, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<String?>.value()) as _i17.Future<String?>);
  @override
  _i17.Future<bool> containsKey(
          {String? key,
          _i21.IOSOptions? iOptions = _i21.IOSOptions.defaultOptions,
          _i21.AndroidOptions? aOptions,
          _i21.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#containsKey, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<bool>.value(false)) as _i17.Future<bool>);
  @override
  _i17.Future<void> delete(
          {String? key,
          _i21.IOSOptions? iOptions = _i21.IOSOptions.defaultOptions,
          _i21.AndroidOptions? aOptions,
          _i21.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
  @override
  _i17.Future<Map<String, String>> readAll(
          {_i21.IOSOptions? iOptions = _i21.IOSOptions.defaultOptions,
          _i21.AndroidOptions? aOptions,
          _i21.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
              Invocation.method(#readAll, [], {
                #iOptions: iOptions,
                #aOptions: aOptions,
                #lOptions: lOptions
              }),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i17.Future<Map<String, String>>);
  @override
  _i17.Future<void> deleteAll(
          {_i21.IOSOptions? iOptions = _i21.IOSOptions.defaultOptions,
          _i21.AndroidOptions? aOptions,
          _i21.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAll, [],
              {#iOptions: iOptions, #aOptions: aOptions, #lOptions: lOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i22.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i17.Future<_i2.Response>);
  @override
  _i17.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i17.Future<_i2.Response>);
  @override
  _i17.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i23.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i17.Future<_i2.Response>);
  @override
  _i17.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i23.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i17.Future<_i2.Response>);
  @override
  _i17.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i23.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i17.Future<_i2.Response>);
  @override
  _i17.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i23.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i17.Future<_i2.Response>);
  @override
  _i17.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<_i24.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i24.Uint8List>.value(_i24.Uint8List(0)))
          as _i17.Future<_i24.Uint8List>);
  @override
  _i17.Future<_i3.StreamedResponse> send(_i25.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse()))
          as _i17.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [Prefs].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrefs extends _i1.Mock implements _i26.Prefs {
  MockPrefs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<String> getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key]),
          returnValue: Future<String>.value('')) as _i17.Future<String>);
  @override
  _i17.Future<void> setString(String? key, String? s) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, s]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
}

/// A class which mocks [CarsViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarsViewModel extends _i1.Mock implements _i27.CarsViewModel {
  MockCarsViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ViewState<List<_i7.Car>> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeViewState<List<_i7.Car>>())
          as _i4.ViewState<List<_i7.Car>>);
  @override
  _i17.Future<void> fetch() =>
      (super.noSuchMethod(Invocation.method(#fetch, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [CarViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarViewModel extends _i1.Mock implements _i28.CarViewModel {
  MockCarViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ViewState<_i7.Car> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeViewState<_i7.Car>()) as _i4.ViewState<_i7.Car>);
  @override
  _i17.Future<void> fetch(int? id) =>
      (super.noSuchMethod(Invocation.method(#fetch, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [GetCars].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCars extends _i1.Mock implements _i29.GetCars {
  MockGetCars() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CarRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCarRepository()) as _i5.CarRepository);
  @override
  set repository(_i5.CarRepository? _repository) =>
      super.noSuchMethod(Invocation.setter(#repository, _repository),
          returnValueForMissingStub: null);
  @override
  _i17.Future<_i6.Result<List<_i7.Car>>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue: Future<_i6.Result<List<_i7.Car>>>.value(
                  _FakeResult<List<_i7.Car>>()))
          as _i17.Future<_i6.Result<List<_i7.Car>>>);
}

/// A class which mocks [GetCarById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCarById extends _i1.Mock implements _i29.GetCarById {
  MockGetCarById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CarRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCarRepository()) as _i5.CarRepository);
  @override
  set repository(_i5.CarRepository? _repository) =>
      super.noSuchMethod(Invocation.setter(#repository, _repository),
          returnValueForMissingStub: null);
  @override
  _i17.Future<_i6.Result<_i7.Car>> call(int? id) =>
      (super.noSuchMethod(Invocation.method(#call, [id]),
              returnValue:
                  Future<_i6.Result<_i7.Car>>.value(_FakeResult<_i7.Car>()))
          as _i17.Future<_i6.Result<_i7.Car>>);
}

/// A class which mocks [CarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarRepository extends _i1.Mock implements _i5.CarRepository {
  MockCarRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i6.Result<List<_i7.Car>>> getCars() =>
      (super.noSuchMethod(Invocation.method(#getCars, []),
              returnValue: Future<_i6.Result<List<_i7.Car>>>.value(
                  _FakeResult<List<_i7.Car>>()))
          as _i17.Future<_i6.Result<List<_i7.Car>>>);
  @override
  _i17.Future<_i6.Result<_i7.Car>> getCarById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getCarById, [id]),
              returnValue:
                  Future<_i6.Result<_i7.Car>>.value(_FakeResult<_i7.Car>()))
          as _i17.Future<_i6.Result<_i7.Car>>);
}

/// A class which mocks [CarApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarApi extends _i1.Mock implements _i30.CarApi {
  MockCarApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<List<_i7.Car>> getCars() =>
      (super.noSuchMethod(Invocation.method(#getCars, []),
              returnValue: Future<List<_i7.Car>>.value(<_i7.Car>[]))
          as _i17.Future<List<_i7.Car>>);
  @override
  _i17.Future<_i7.Car> getCarById(int? id) => (super.noSuchMethod(
      Invocation.method(#getCarById, [id]),
      returnValue: Future<_i7.Car>.value(_FakeCar())) as _i17.Future<_i7.Car>);
}

/// A class which mocks [LoginViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginViewModel extends _i1.Mock implements _i9.LoginViewModel {
  MockLoginViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.LoginUseCase get loginUseCase =>
      (super.noSuchMethod(Invocation.getter(#loginUseCase),
          returnValue: _FakeLoginUseCase()) as _i8.LoginUseCase);
  @override
  _i9.LoginModel get model => (super.noSuchMethod(Invocation.getter(#model),
      returnValue: _FakeLoginModel()) as _i9.LoginModel);
  @override
  set model(_i9.LoginModel? _model) =>
      super.noSuchMethod(Invocation.setter(#model, _model),
          returnValueForMissingStub: null);
  @override
  _i9.LoginView get view => (super.noSuchMethod(Invocation.getter(#view),
      returnValue: _FakeLoginView()) as _i9.LoginView);
  @override
  set view(_i9.LoginView? _view) =>
      super.noSuchMethod(Invocation.setter(#view, _view),
          returnValueForMissingStub: null);
  @override
  _i10.TextEditingController get tLogin => (super.noSuchMethod(
      Invocation.getter(#tLogin),
      returnValue: _FakeTextEditingController()) as _i10.TextEditingController);
  @override
  _i10.TextEditingController get tSenha => (super.noSuchMethod(
      Invocation.getter(#tSenha),
      returnValue: _FakeTextEditingController()) as _i10.TextEditingController);
  @override
  _i11.BooleanStream get loading$ =>
      (super.noSuchMethod(Invocation.getter(#loading$),
          returnValue: _FakeBooleanStream()) as _i11.BooleanStream);
  @override
  _i12.LoginValidator get validator =>
      (super.noSuchMethod(Invocation.getter(#validator),
          returnValue: _FakeLoginValidator()) as _i12.LoginValidator);
  @override
  bool validate() =>
      (super.noSuchMethod(Invocation.method(#validate, []), returnValue: false)
          as bool);
  @override
  _i17.Future<void> login() =>
      (super.noSuchMethod(Invocation.method(#login, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
  @override
  void setLogin(String? login) =>
      super.noSuchMethod(Invocation.method(#setLogin, [login]),
          returnValueForMissingStub: null);
  @override
  void setPassword(String? password) =>
      super.noSuchMethod(Invocation.method(#setPassword, [password]),
          returnValueForMissingStub: null);
  @override
  void fake() => super.noSuchMethod(Invocation.method(#fake, []),
      returnValueForMissingStub: null);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [LoginView].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginView extends _i1.Mock implements _i9.LoginView {
  MockLoginView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onLoginSuccess() =>
      super.noSuchMethod(Invocation.method(#onLoginSuccess, []),
          returnValueForMissingStub: null);
  @override
  void onLoginError(String? msg) =>
      super.noSuchMethod(Invocation.method(#onLoginError, [msg]),
          returnValueForMissingStub: null);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i8.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.UserLocalRepository get userRepository =>
      (super.noSuchMethod(Invocation.getter(#userRepository),
          returnValue: _FakeUserLocalRepository()) as _i13.UserLocalRepository);
  @override
  _i14.LoginRepository get loginRepository =>
      (super.noSuchMethod(Invocation.getter(#loginRepository),
          returnValue: _FakeLoginRepository()) as _i14.LoginRepository);
  @override
  _i17.Future<_i6.Result<_i15.User>> call(_i9.LoginModel? model) =>
      (super.noSuchMethod(Invocation.method(#call, [model]),
              returnValue:
                  Future<_i6.Result<_i15.User>>.value(_FakeResult<_i15.User>()))
          as _i17.Future<_i6.Result<_i15.User>>);
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i14.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i6.Result<_i15.User>> login(_i9.LoginModel? model) =>
      (super.noSuchMethod(Invocation.method(#login, [model]),
              returnValue:
                  Future<_i6.Result<_i15.User>>.value(_FakeResult<_i15.User>()))
          as _i17.Future<_i6.Result<_i15.User>>);
}

/// A class which mocks [LoginApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginApi extends _i1.Mock implements _i31.LoginApi {
  MockLoginApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i15.User> login(String? login, String? password) =>
      (super.noSuchMethod(Invocation.method(#login, [login, password]),
              returnValue: Future<_i15.User>.value(_FakeUser()))
          as _i17.Future<_i15.User>);
}

/// A class which mocks [LogoutViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutViewModel extends _i1.Mock implements _i32.LogoutViewModel {
  MockLogoutViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.LogoutUseCase get logoutUseCase =>
      (super.noSuchMethod(Invocation.getter(#logoutUseCase),
          returnValue: _FakeLogoutUseCase()) as _i16.LogoutUseCase);
  @override
  set logoutUseCase(_i16.LogoutUseCase? _logoutUseCase) =>
      super.noSuchMethod(Invocation.setter(#logoutUseCase, _logoutUseCase),
          returnValueForMissingStub: null);
  @override
  _i17.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i16.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.UserLocalRepository get userLocalRepository =>
      (super.noSuchMethod(Invocation.getter(#userLocalRepository),
          returnValue: _FakeUserLocalRepository()) as _i13.UserLocalRepository);
  @override
  _i17.Future<void> call() => (super.noSuchMethod(Invocation.method(#call, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i17.Future<void>);
}

/// A class which mocks [UserLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalRepository extends _i1.Mock
    implements _i13.UserLocalRepository {
  MockUserLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<void> save(_i15.User? user) =>
      (super.noSuchMethod(Invocation.method(#save, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
  @override
  _i17.Future<void> clear() =>
      (super.noSuchMethod(Invocation.method(#clear, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i17.Future<void>);
}

/// A class which mocks [ViewState].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewState<T> extends _i1.Mock implements _i4.ViewState<T> {
  MockViewState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get loading =>
      (super.noSuchMethod(Invocation.getter(#loading), returnValue: false)
          as bool);
  @override
  set value(T? value) => super.noSuchMethod(Invocation.setter(#value, value),
      returnValueForMissingStub: null);
  @override
  set loading(bool? b) => super.noSuchMethod(Invocation.setter(#loading, b),
      returnValueForMissingStub: null);
  @override
  set error(_i33.ErrorState? error) =>
      super.noSuchMethod(Invocation.setter(#error, error),
          returnValueForMissingStub: null);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  bool get stringify =>
      (super.noSuchMethod(Invocation.getter(#stringify), returnValue: false)
          as bool);
  @override
  _i17.StreamController<_i4.ViewState<T>> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController<_i4.ViewState<T>>())
          as _i17.StreamController<_i4.ViewState<T>>);
  @override
  set controller(_i17.StreamController<_i4.ViewState<T>>? _controller) =>
      super.noSuchMethod(Invocation.setter(#controller, _controller),
          returnValueForMissingStub: null);
  @override
  _i17.Stream<_i4.ViewState<T>> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.ViewState<T>>.empty())
          as _i17.Stream<_i4.ViewState<T>>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i4.ViewState<T>? object) =>
      super.noSuchMethod(Invocation.method(#add, [object]),
          returnValueForMissingStub: null);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
